<%- include('./layouts/style') %>
<%- include('./layouts/head') %>
<%- include('./layouts/menu-list') %>

<div class="container">
    <h1>Chào mừng đến với trang quản trị</h1>
    <p>Đây là trang quản trị admin. Bạn có quyền truy cập đầy đủ vào hệ thống.</p>

    <div class="stats-section">
        <h2>Thống kê đăng nhập</h2>
        <div class="filter-form">
            <label for="day">Ngày:</label>
            <select id="day">
                <option value="">Tất cả</option>
                <% for (let i = 1; i <= 31; i++) { %>
                    <option value="<%= i %>"><%= i %></option>
                <% } %>
            </select>

            <label for="month">Tháng:</label>
            <select id="month">
                <option value="">Tất cả</option>
                <% for (let i = 1; i <= 12; i++) { %>
                    <option value="<%= i %>"><%= i %></option>
                <% } %>
            </select>

            <label for="year">Năm:</label>
            <select id="year">
                <option value="">Tất cả</option>
                <% const currentYear = new Date().getFullYear(); %>
                <% for (let i = currentYear; i >= currentYear - 5; i--) { %>
                    <option value="<%= i %>"><%= i %></option>
                <% } %>
            </select>

            <button id="applyFilter">Áp dụng</button>
        </div>

        <!-- Nút "Xem thống kê" -->
        <button id="toggleStatsButton" class="btn btn-primary mb-3">Xem thống kê</button>

        <!-- Ô tìm kiếm duy nhất -->
        <div id="searchSection" style="display: none;">
            <input type="text" id="searchInput" placeholder="Tìm kiếm theo tên, email hoặc số lần đăng nhập..." class="form-control mb-3">
            <button id="searchButton" class="btn btn-secondary">Tìm</button>
        </div>

        <!-- Bảng hiển thị thông tin đăng nhập của người dùng -->
        <div id="userStatsTable" class="table-responsive" style="display: none; max-height: 300px; overflow-y: auto;">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Tên người dùng</th>
                        <th>Email</th>
                        <th>Số lần đăng nhập</th>
                    </tr>
                </thead>
                <tbody id="userLoginStats">
                    <!-- Dữ liệu sẽ được thêm vào đây bằng JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Phân trang -->
        <div id="paginationSection" style="display: none;" class="mt-3">
            <nav aria-label="Page navigation">
                <ul class="pagination" id="pagination">
                    <!-- Các nút phân trang sẽ được thêm vào đây bằng JavaScript -->
                </ul>
            </nav>
        </div>

        <!-- Biểu đồ thống kê -->
        <div class="chart-container">
            <canvas id="statsChart" width="400" height="200"></canvas>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let myChart; // Biến toàn cục để lưu biểu đồ hiện tại
    let currentPage = 1; // Trang hiện tại
    const itemsPerPage = 5; // Số người dùng hiển thị trên mỗi trang
    let allUserData = []; // Lưu trữ toàn bộ dữ liệu người dùng

    // Hàm để vẽ biểu đồ
    function drawChart(canvasId, labels, userData, loggedInUserData, loginData) {
    const ctx = document.getElementById(canvasId).getContext('2d');
    if (myChart) {
        myChart.destroy(); // Hủy biểu đồ cũ nếu tồn tại
    }
    myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Số lượng người dùng',
                    data: userData,
                    backgroundColor: 'rgba(75, 192, 192, 0.6)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Số lượng người dùng đăng nhập',
                    data: loggedInUserData,
                    backgroundColor: 'rgba(255, 99, 132, 0.6)',
                    borderColor: 'rgba(255, 99, 132, 1)',
                    borderWidth: 1
                },
                {
                    label: 'Số lần đăng nhập',
                    data: loginData,
                    backgroundColor: 'rgba(153, 102, 255, 0.6)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: 'rgba(200, 200, 200, 0.2)'
                    }
                },
                x: {
                    grid: {
                        color: 'rgba(200, 200, 200, 0.2)'
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        color: 'rgba(0, 0, 0, 0.8)'
                    }
                }
            }
        }
    });
}

    // Hàm để hiển thị thông tin đăng nhập của người dùng
    function displayUserLoginStats(data, page = 1) {
        const tbody = document.getElementById('userLoginStats');
        tbody.innerHTML = ''; // Xóa dữ liệu cũ

        // Tính toán vị trí bắt đầu và kết thúc của dữ liệu trên trang hiện tại
        const startIndex = (page - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const paginatedData = data.slice(startIndex, endIndex);

        // Hiển thị dữ liệu trên trang hiện tại
        paginatedData.forEach(user => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${user.loginCount}</td>
            `;
            tbody.appendChild(row);
        });

        // Hiển thị phân trang
        displayPagination(data.length, page);
    }

    // Hàm để hiển thị phân trang
    function displayPagination(totalItems, currentPage) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = ''; // Xóa phân trang cũ

        const totalPages = Math.ceil(totalItems / itemsPerPage);

        // Tạo nút "Trang trước"
        const prevButton = document.createElement('li');
        prevButton.className = `page-item ${currentPage === 1 ? 'disabled' : ''}`;
        prevButton.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Trang trước</a>`;
        pagination.appendChild(prevButton);

        // Tạo các nút trang
        for (let i = 1; i <= totalPages; i++) {
            const pageButton = document.createElement('li');
            pageButton.className = `page-item ${i === currentPage ? 'active' : ''}`;
            pageButton.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
            pagination.appendChild(pageButton);
        }

        // Tạo nút "Trang sau"
        const nextButton = document.createElement('li');
        nextButton.className = `page-item ${currentPage === totalPages ? 'disabled' : ''}`;
        nextButton.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Trang sau</a>`;
        pagination.appendChild(nextButton);
    }

    // Hàm để thay đổi trang
    function changePage(page) {
        currentPage = page;
        displayUserLoginStats(allUserData, page);
    }

    // Hàm để lấy dữ liệu và hiển thị thống kê
    function fetchAndDisplayStats(day, month, year) {
    fetch(`/admin/users/login-stats?day=${day}&month=${month}&year=${year}`)
        .then(response => {
            if (!response.ok) {
                throw new Error('Lỗi khi fetch dữ liệu');
            }
            return response.json();
        })
        .then(data => {
            console.log("Dữ liệu nhận được từ API:", data); // Debug dữ liệu

            // Lưu trữ toàn bộ dữ liệu
            allUserData = data.userLoginStats;

            // Hiển thị bảng thống kê
            displayUserLoginStats(allUserData, currentPage);

            // Lọc dữ liệu biểu đồ: chỉ giữ lại các mục có logins > 0
            const filteredChartData = data.chartData.filter(item => item.logins > 0);

            // Kiểm tra nếu không có dữ liệu sau khi lọc
            if (filteredChartData.length === 0) {
                alert('Không có dữ liệu đăng nhập trong khoảng thời gian được chọn.');
                return;
            }

            // Vẽ biểu đồ với dữ liệu đã lọc
            const labels = filteredChartData.map(item => item.date);
            const userData = filteredChartData.map(item => item.users);
            const loggedInUserData = filteredChartData.map(item => item.loggedInUsers);
            const loginData = filteredChartData.map(item => item.logins);
            drawChart('statsChart', labels, userData, loggedInUserData, loginData);
        })
        .catch(error => console.error('Lỗi khi lấy dữ liệu thống kê:', error));
}
      
    // Lắng nghe sự kiện khi nhấn nút "Áp dụng"
    document.getElementById('applyFilter').addEventListener('click', function () {
        const day = document.getElementById('day').value;
        const month = document.getElementById('month').value;
        const year = document.getElementById('year').value;

        currentPage = 1; // Reset về trang đầu tiên
        fetchAndDisplayStats(day, month, year);
    });

    // Lắng nghe sự kiện khi nhấn nút "Xem thống kê"
    document.getElementById('toggleStatsButton').addEventListener('click', function () {
        const tableSection = document.getElementById('userStatsTable');
        const searchSection = document.getElementById('searchSection');
        const paginationSection = document.getElementById('paginationSection');

        // Ẩn/hiện bảng, ô tìm kiếm và phân trang
        if (tableSection.style.display === 'none') {
            tableSection.style.display = 'block';
            searchSection.style.display = 'block';
            paginationSection.style.display = 'block';
            this.textContent = 'Ẩn thống kê';
        } else {
            tableSection.style.display = 'none';
            searchSection.style.display = 'none';
            paginationSection.style.display = 'none';
            this.textContent = 'Xem thống kê';
        }
    });

    // Lắng nghe sự kiện khi nhấn nút "Tìm"
    document.getElementById('searchButton').addEventListener('click', function () {
        const searchTerm = document.getElementById('searchInput').value.toLowerCase();

        // Lọc dữ liệu từ toàn bộ danh sách người dùng
        const filteredData = allUserData.filter(user => {
            const name = user.name.toLowerCase();
            const email = user.email.toLowerCase();
            const loginCount = user.loginCount.toString();

            // Kiểm tra nếu searchTerm khớp với tên, email hoặc số lần đăng nhập
            return (
                name.includes(searchTerm) ||
                email.includes(searchTerm) ||
                loginCount.includes(searchTerm)
            );
        });

        // Hiển thị kết quả tìm kiếm
        displayUserLoginStats(filteredData, 1); // Hiển thị kết quả từ trang 1
    });

    // Tải dữ liệu mặc định khi trang được tải
    document.addEventListener('DOMContentLoaded', function () {
        fetchAndDisplayStats('', '', ''); // Mặc định không lọc
    });
</script>

<%- include('./layouts/footer') %>
<%- include('./layouts/script') %>