const Cart = require('../../models/Cart');
const Book = require('../../models/Book');
const { findById, findByIdAndUpdate } = require('../../models/Order');
const {applyDiscountInfoToBooks} = require('./product.controller');
const getCartByUserId = async (userId) => {
    try {
        const cart = await Cart.findOne({ userId })
            .populate({
                path: 'items.bookId'
            });
        return cart;
    } catch (error) {
        console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        return null;
    }
};

const addBookToCart = async (userId, bookId, quantity) => {
    try {
        const book = await Book.findById(bookId).populate("discountId");
        if (!book) {
            throw new Error("S√°ch kh√¥ng t·ªìn t·∫°i");
        }
        const quantityNumber = Number(quantity);
        if (quantityNumber <= 0) {
            throw new Error("S·ªë l∆∞·ª£ng s√°ch kh√¥ng h·ª£p l·ªá");
        }

        let cart = await Cart.findOne({ userId });

        if (!cart) {
            cart = new Cart({
                userId,
                items: [],
                totalPrice: 0
            });
        }

        // Ki·ªÉm tra s√°ch ƒë√£ t·ªìn t·∫°i trong gi·ªè ch∆∞a
        const existingItem = cart.items.find(item => item.bookId.toString() === bookId);

        if (existingItem) {
            existingItem.quantity += quantityNumber;
        } else {
            cart.items.push({ bookId, quantity: quantityNumber });
        }

        // T√≠nh l·∫°i t·ªïng ti·ªÅn gi·ªè h√†ng
        // L·∫•y th√¥ng tin chi ti·∫øt s√°ch trong items
        const populatedCart = await cart.populate({
            path: "items.bookId",
            populate: {
              path: "discountId" // Populate th√™m discountId trong t·ª´ng book
            }
          });
          

        let total = 0;
        populatedCart.items.forEach(item => {
            const book = item.bookId;
            const price = book.price;
            const discount = book.discountId?.value || 0;
            const discountedPrice = price * (1 - discount / 100);
            total += discountedPrice * item.quantity;
        });

        cart.totalPrice = parseFloat(total.toFixed(2));
        await cart.save();

        console.log("‚úÖ ƒê√£ th√™m s√°ch v√†o gi·ªè h√†ng");

    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m s√°ch v√†o gi·ªè h√†ng:", error.message);
    }
};



const removeBookFromCart = async (userId, bookId) => {
    try {
        const cart = await Cart.findOne({ userId }).populate({
            path: 'items.bookId',
            populate: { path: 'discountId' }
        });

        if (!cart) {
            throw new Error("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i");
        }

        const bookIndex = cart.items.findIndex(item => item.bookId._id.toString() === bookId);
        if (bookIndex === -1) {
            throw new Error("S√°ch kh√¥ng c√≥ trong gi·ªè h√†ng");
        }

        // X√≥a item
        cart.items.splice(bookIndex, 1);

        // T√≠nh l·∫°i t·ªïng ti·ªÅn
        let total = 0;
        for (const item of cart.items) {
            const price = item.bookId.price;
            const discount = item.bookId.discountId?.value || 0;
            const priceAfterDiscount = price * (1 - discount / 100);
            total += priceAfterDiscount * item.quantity;
        }

        cart.totalPrice = parseFloat(total.toFixed(2));

        await cart.save();
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a s√°ch kh·ªèi gi·ªè h√†ng:", error.message);
    }
};

const clearCart = async (userId) => {
    try {
        const cartClear = await Cart.findOneAndDelete({ userId });
        if (!cartClear) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa userId: ${userId}`);
            return null;
        }

        console.log(`üóëÔ∏è ƒê√£ x√≥a gi·ªè h√†ng c·ªßa userId: ${userId}`);
        return cartClear;
    } catch (error) {
        console.error('‚ùå L·ªói khi x√≥a gi·ªè h√†ng:', error.message);
        return null;
    }
};

const updateQuantity = async (userId, bookId, quantityUpdate) => {
    try {
        const cart = await Cart.findOne({ userId }).populate({
            path: "items.bookId",
            populate: {
              path: "discountId" // Populate th√™m discountId trong t·ª´ng book
            }});
        if (!cart) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa userId: ${userId}`);
            return null;
        }

        const itemIndex = cart.items.findIndex(item => item.bookId._id.toString() === bookId);
        if (itemIndex === -1) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ bookId: ${bookId}`);
            return null;
        }

        const quantity = Number(quantityUpdate);
        if (quantity <= 0) {
            // Xo√° s·∫£n ph·∫©m kh·ªèi gi·ªè n·∫øu s·ªë l∆∞·ª£ng <= 0
            cart.items.splice(itemIndex, 1);
        } else {
            cart.items[itemIndex].quantity = quantity;
        }

        // T√≠nh l·∫°i t·ªïng gi√° ti·ªÅn
        let total = 0;
        cart.items.forEach(item => {
            const book = item.bookId;
            const discount = book.discountId?.value || 0;
            const priceAfterDiscount = book.price * (1 - discount / 100);
            total += priceAfterDiscount * item.quantity;
        });

        cart.totalPrice = parseFloat(total.toFixed(2));
        await cart.save();

        console.log("‚úÖ C·∫≠p nh·∫≠t gi·ªè h√†ng th√†nh c√¥ng");
        return cart;

    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error.message);
        return null;
    }
};

const increaseQuantity = async (userId, bookId) => {
    try {
        // T√¨m gi·ªè h√†ng theo userId
        const cart = await Cart.findOne({userId});
        if (!cart) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa userId: ${userId}`);
            return null;
        }

        const itemIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);
        if (itemIndex === -1) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ bookId: ${bookId}`);
            return null;
        }

        // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        cart.items[itemIndex].quantity += 1;

        // C·∫≠p nh·∫≠t l·∫°i t·ªïng gi√° ti·ªÅn
        cart.totalPrice = parseFloat(
        cart.items.reduce((total, item) => total + parseFloat(item.price) * item.quantity, 0).toFixed(2)
        );
        // L∆∞u l·∫°i thay ƒë·ªïi
        await cart.save();
        return cart;
    } catch (error) {
        console.error("üî• L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
    }
};

module.exports = { getCartByUserId , addBookToCart , removeBookFromCart, clearCart, increaseQuantity, updateQuantity};