const Comment = require('../../models/Comment');
const User = require('../../models/User');
const Book = require('../../models/Book');


// L·∫•y danh s√°ch b√¨nh lu·∫≠n
exports.getAllComments = async (req, res) => {
    try {
        const page = parseInt(req.query.page) || 1; // Trang hi·ªán t·∫°i, m·∫∑c ƒë·ªãnh l√† 1
        const limit = 10; // S·ªë b√¨nh lu·∫≠n hi·ªÉn th·ªã tr√™n m·ªói trang
        const skip = (page - 1) * limit; // V·ªã tr√≠ b·∫Øt ƒë·∫ßu l·∫•y d·ªØ li·ªáu

        // L·∫•y danh s√°ch b√¨nh lu·∫≠n v·ªõi ph√¢n trang v√† populate th√¥ng tin s√°ch v√† ng∆∞·ªùi d√πng
        const comments = await Comment.find()
            .skip(skip)
            .limit(limit)
            .populate('book', 'title') // L·∫•y th√¥ng tin s√°ch (ch·ªâ l·∫•y tr∆∞·ªùng 'title')
            .populate('user', 'name'); // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng (ch·ªâ l·∫•y tr∆∞·ªùng 'name')
        console.log(comments);
        const totalComments = await Comment.countDocuments(); // T·ªïng s·ªë b√¨nh lu·∫≠n
        const totalPages = Math.ceil(totalComments / limit); // T·ªïng s·ªë trang

        res.render('admin/comments', {
            comments,
            totalComments,
            currentPage: page,
            totalPages,
            title: 'Qu·∫£n l√Ω B√¨nh lu·∫≠n',
            path: 'comments'
        });
    } catch (err) {
        res.status(500).send({
            message: 'L·ªói server khi l·∫•y danh s√°ch b√¨nh lu·∫≠n.',
            error: err.message
        });
    }
};
// üìå X√≥a b√¨nh lu·∫≠n theo ID
exports.deleteComment = async (req, res) => {
  try {
      const commentId = req.params.id;
      await Comment.findByIdAndDelete(commentId);
      res.redirect("/admin/comment"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch b√¨nh lu·∫≠n
  } catch (err) {
      res.status(500).send("L·ªói server khi x√≥a b√¨nh lu·∫≠n.");
  }
};

exports.searchComments = async (req, res) => {
  try {
      const query = req.query.query;
      const comments = await Comment.find({
          content: { $regex: query, $options: "i" }
      })
          .populate("user", "name")
          .populate("book", "title");

      res.render("admin/comments", {
          comments,
          totalComments: comments.length,
          currentPage: 1,
          totalPages: 1,
          title: "K·∫øt qu·∫£ t√¨m ki·∫øm",
          path: "comments",
      });
  } catch (err) {
      res.status(500).send("L·ªói server khi t√¨m ki·∫øm b√¨nh lu·∫≠n.");
  }
};

// üìå Ch·ªânh s·ª≠a b√¨nh lu·∫≠n
exports.updateComment = async (req, res) => {
  try {
      const { content } = req.body;
      const commentId = req.params.id;
      await Comment.findByIdAndUpdate(commentId, { content });
      res.redirect("/admin/comment"); // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch b√¨nh lu·∫≠n
  } catch (err) {
      res.status(500).send("L·ªói server khi c·∫≠p nh·∫≠t b√¨nh lu·∫≠n.");
  }
};
