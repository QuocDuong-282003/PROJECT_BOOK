const User = require('../../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
// const nodemailer = require('nodemailer');
// const crypto = require('crypto');

exports.renderLogin = (req, res) => {
    res.render('admin/auth/login', {
        path: 'auth/login',
        title: 'Login Page',
        error: null
    });
};

// üõë ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
    try {
        const { email, password } = req.body;

        // üìå Ki·ªÉm tra ƒëu√¥i email c√≥ ph·∫£i ".admin" kh√¥ng
        if (!email.endsWith('.admin')) {
            return res.render('admin/auth/login', { error: 'Ch·ªâ email c√≥ ƒëu√¥i ".admin" m·ªõi ƒë∆∞·ª£c truy c·∫≠p!' });
        }

        // üìå Ki·ªÉm tra c√≥ admin ch∆∞a
        const existingAdmin = await User.findOne({ role: 'admin' });

        if (!existingAdmin) {
            // N·∫øu ch∆∞a c√≥ admin, t√†i kho·∫£n n√†y s·∫Ω tr·ªü th√†nh admin duy nh·∫•t
            const hashedPassword = await bcrypt.hash(password, 10);
            const newAdmin = await User.create({
                name: 'Admin',
                email,
                password: hashedPassword,
                role: 'admin',
                isAdmin: true
            });

            console.log('‚úÖ T√†i kho·∫£n admin ƒë√£ ƒë∆∞·ª£c t·∫°o:', newAdmin);
        }

        // üìå T√¨m user trong database
        const user = await User.findOne({ email });

        if (!user) {
            return res.render('admin/auth/login', { error: 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i!' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.render('admin/auth/login', { error: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' });
        }

        if (user.role !== 'admin') {
            return res.render('admin/auth/login', { error: 'B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p!' });
        }

        const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET1, { expiresIn: '1h' });

        res.cookie('token', token, {
            httpOnly: true,
            // secure: process.env.NODE_ENV === 'production',
            sameSite: 'strict',
            maxAge: 3600000
        });

        return res.redirect('/admin');
    } catch (error) {
        console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
        res.status(500).send('L·ªói Server');
    }
};
exports.logout = (req, res) => {
    res.clearCookie('token');  // X√≥a cookie token
    res.redirect('/admin/auth/login');  // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
};

// üõë Ch·∫∑n truy c·∫≠p v√†o t·∫•t c·∫£ c√°c trang admin n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p

exports.checkAdmin = (req, res, next) => {
    try {
        const token = req.cookies.token;

        if (!token) {
            return res.redirect('/admin/auth/login'); // Chuy·ªÉn v·ªÅ trang login n·∫øu ch∆∞a ƒëƒÉng nh·∫≠p
        }

        const decoded = jwt.verify(token, process.env.JWT_SECRET1);

        if (!decoded || decoded.role !== 'admin') {
            res.clearCookie('token'); // X√≥a token n·∫øu kh√¥ng h·ª£p l·ªá
            return res.redirect('/admin/auth/login');
        }

        req.user = decoded;
        next();
    } catch (error) {
        console.error('L·ªói x√°c th·ª±c admin:', error);
        res.clearCookie('token');
        return res.redirect('/admin/auth/login');
    }
};