const Book = require('../../models/Book');
const Category = require('../../models/Category');
const Publisher = require('../../models/Publisher');

// üìå L·∫•y danh s√°ch s√°ch v√† hi·ªÉn th·ªã tr√™n giao di·ªán admin
exports.getBooks = async (req, res) => {   
    try {
        let page = parseInt(req.query.page) || 1; // Trang hi·ªán t·∫°i
        let limit = 10; // S·ªë s√°ch m·ªói trang
        let skip = (page - 1) * limit; // S·ªë s√°ch b·ªè qua

        const books = await Book.find()
            .populate('categoryId publisherId')
            .skip(skip)
            .limit(limit);

        const totalBooks = await Book.countDocuments(); // T·ªïng s·ªë s√°ch
        const totalPages = Math.ceil(totalBooks / limit); // T·ªïng s·ªë trang

        const categories = await Category.find();
        const publishers = await Publisher.find();

        res.render('admin/book/productsAdmin', { 
            title: 'Qu·∫£n l√Ω S√°ch', 
            books, 
            categories, 
            publishers,
            totalBooks, // üëà Hi·ªÉn th·ªã t·ªïng s·ªë s√°ch
            totalPages, // üëà T·ªïng s·ªë trang
            currentPage: page, // üëà Trang hi·ªán t·∫°i
            path: 'books' // üëà ƒê·ªÉ menu hi·ªÉn th·ªã ƒë√∫ng
        });
    } catch (err) {
        console.error("L·ªói khi l·∫•y danh s√°ch s√°ch:", err);
        res.status(500).send("L·ªói server khi l·∫•y danh s√°ch s√°ch.");
    }
};


exports.createBook = async (req, res) => {
    try {
        const { title, author, categoryId, publisherId, price, stock, description } = req.body;

        const newBook = new Book({
            title,
            author,
            categoryId: categoryId || null,
            publisherId: publisherId || null,
            price: price || 0,
            stock: stock || 0,
            description: description || "Kh√¥ng c√≥ m√¥ t·∫£",
            coverImage: req.file ? `/uploads/${req.file.filename}` : "/uploads/default.jpg"
        });

        const savedBook = await newBook.save();
        const populatedBook = await savedBook.populate('categoryId publisherId'); // L·∫•y d·ªØ li·ªáu danh m·ª•c & NXB

        res.json({ success: true, book: populatedBook });
    } catch (err) {
        console.error("‚ùå L·ªói khi th√™m s√°ch:", err);
        res.status(500).json({ success: false, message: "L·ªói server khi th√™m s√°ch." });
    }
};


// üìå C·∫≠p nh·∫≠t s√°ch t·ª´ form EJS
const mongoose = require("mongoose");

exports.updateBook = async (req, res) => {
    try {
        const bookId = req.params.id;

        // Ki·ªÉm tra ID s√°ch h·ª£p l·ªá
        if (!mongoose.Types.ObjectId.isValid(bookId)) {
            return res.status(400).json({ success: false, message: "ID s√°ch kh√¥ng h·ª£p l·ªá!" });
        }

        // L·∫•y d·ªØ li·ªáu t·ª´ body
        const { title, author, categoryId, publisherId, price, stock, description, isDeleted } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!title || !author || !price || !stock) {
            return res.status(400).json({ success: false, message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c b·ªã thi·∫øu!" });
        }

        // Ki·ªÉm tra categoryId v√† publisherId c√≥ h·ª£p l·ªá kh√¥ng
        const updateData = { title, author, price: parseFloat(price), stock: parseInt(stock), description, isDeleted };

        if (categoryId && mongoose.Types.ObjectId.isValid(categoryId)) {
            updateData.categoryId = categoryId;
        }

        if (publisherId && mongoose.Types.ObjectId.isValid(publisherId)) {
            updateData.publisherId = publisherId;
        }

        // C·∫≠p nh·∫≠t s√°ch
        const updatedBook = await Book.findByIdAndUpdate(bookId, updateData, { new: true });

        if (!updatedBook) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch!" });
        }

        res.json({ success: true, message: "C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng!", book: updatedBook });
    } catch (err) {
        console.error("L·ªói server khi c·∫≠p nh·∫≠t s√°ch:", err);
        res.status(500).json({ success: false, message: "L·ªói server khi c·∫≠p nh·∫≠t s√°ch.", error: err.message });
    }
};


// üìå X√≥a s√°ch b·∫±ng ph∆∞∆°ng th·ª©c DELETE
exports.deleteBook = async (req, res) => {
    try {
        const bookId = req.params.id;
        const deletedBook = await Book.findByIdAndDelete(bookId);

        if (!deletedBook) {
            return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch!" });
        }

        res.json({ success: true, message: "X√≥a s√°ch th√†nh c√¥ng!" });
    } catch (err) {
        console.error("L·ªói khi x√≥a s√°ch:", err);
        res.status(500).json({ success: false, message: "L·ªói server khi x√≥a s√°ch!" });
    }
};
// üìå API T√¨m ki·∫øm s√°ch theo ti√™u ƒë·ªÅ, t√°c gi·∫£, danh m·ª•c, NXB
exports.searchBooks = async (req, res) => {
    try {
        const query = req.query.query ? req.query.query.trim() : "";

        if (!query) {
            return res.status(400).json({ success: false, message: "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!" });
        }

        const books = await Book.find({
            $or: [
                { title: new RegExp(query, "i") }, // T√¨m theo ti√™u ƒë·ªÅ
                { author: new RegExp(query, "i") }, // T√¨m theo t√°c gi·∫£
            ]
        }).populate("categoryId publisherId"); // L·∫•y th√™m d·ªØ li·ªáu danh m·ª•c & NXB

        res.json({ success: true, books });
    } catch (err) {
        console.error("L·ªói khi t√¨m ki·∫øm s√°ch:", err);
        res.status(500).json({ success: false, message: "L·ªói server khi t√¨m ki·∫øm s√°ch!" });
    }
};