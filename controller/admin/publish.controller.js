const Publisher = require("../../models/Publisher");

// üìå L·∫•y danh s√°ch t·∫•t c·∫£ nh√† xu·∫•t b·∫£n
exports.getAllPublishers = async (req, res) => {
    try {
        const publishers = await Publisher.find();
        res.status(200).json({ publishers });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n:", error);
        res.status(500).json({ message: "L·ªói server khi l·∫•y danh s√°ch nh√† xu·∫•t b·∫£n", error: error.message });
    }
};

// üìå Th√™m nh√† xu·∫•t b·∫£n m·ªõi
exports.createPublisher = async (req, res) => {
    try {
        const { name, address, phone, email } = req.body;

        if (!name || !email) {
            return res.status(400).json({ message: "T√™n v√† email l√† b·∫Øt bu·ªôc!" });
        }

        const newPublisher = new Publisher({ name, address, phone, email });
        await newPublisher.save();

        res.status(201).json({ message: "Nh√† xu·∫•t b·∫£n ƒë√£ ƒë∆∞·ª£c th√™m!", publisher: newPublisher });
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m nh√† xu·∫•t b·∫£n:", error);
        res.status(500).json({ message: "L·ªói server khi th√™m nh√† xu·∫•t b·∫£n", error: error.message });
    }
};

// üìå C·∫≠p nh·∫≠t th√¥ng tin nh√† xu·∫•t b·∫£n
exports.updatePublisher = async (req, res) => {
    try {
        const { id } = req.params;
        const { name, address, phone, email } = req.body;

        const updatedPublisher = await Publisher.findByIdAndUpdate(
            id,
            { name, address, phone, email },
            { new: true, runValidators: true }
        );

        if (!updatedPublisher) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† xu·∫•t b·∫£n!" });
        }

        res.status(200).json({ message: "C·∫≠p nh·∫≠t th√†nh c√¥ng!", publisher: updatedPublisher });
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n:", error);
        res.status(500).json({ message: "L·ªói server khi c·∫≠p nh·∫≠t nh√† xu·∫•t b·∫£n", error: error.message });
    }
};

// üìå X√≥a nh√† xu·∫•t b·∫£n
exports.deletePublisher = async (req, res) => {
    try {
        const { id } = req.params;

        const deletedPublisher = await Publisher.findByIdAndDelete(id);

        if (!deletedPublisher) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y nh√† xu·∫•t b·∫£n!" });
        }

        res.status(200).json({ message: "X√≥a th√†nh c√¥ng!", publisher: deletedPublisher });
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a nh√† xu·∫•t b·∫£n:", error);
        res.status(500).json({ message: "L·ªói server khi x√≥a nh√† xu·∫•t b·∫£n", error: error.message });
    }
};
