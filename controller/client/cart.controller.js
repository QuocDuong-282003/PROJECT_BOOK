const Cart = require('../../models/Cart');
const Book = require('../../models/Book');
const { findById, findByIdAndUpdate } = require('../../models/Order');

const getCartByUserId = async (userId) => {
    try {
        const cart = await Cart.findOne({ userId })
            .populate({
                path: 'items.bookId',
                select: 'title price stock' // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
            });

        return cart;
    } catch (error) {
        console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        return null;
    }
};

const addBookToCart = async (userId, bookId, quantity) => {
    try {
        const book = await Book.findById(bookId);
        if (!book) {
            throw new Error("S√°ch kh√¥ng t·ªìn t·∫°i");
        }

        const quantityNumber = Number(quantity);
        if (quantityNumber <= 0) {
            throw new Error("S·ªë l∆∞·ª£ng s√°ch kh√¥ng h·ª£p l·ªá");
        }

        let cart = await Cart.findOne({ userId });

        if (cart) {
            // Ki·ªÉm tra n·∫øu s√°ch ƒë√£ c√≥ trong gi·ªè h√†ng
            const existingItem = cart.items.find(item => item.bookId.toString() === bookId);

            if (existingItem) {
                // N·∫øu s√°ch ƒë√£ c√≥, c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
                existingItem.quantity += quantityNumber;
                existingItem.price = parseFloat(existingItem.quantity * book.price).toFixed(2);
            } else {
                // N·∫øu s√°ch ch∆∞a c√≥, th√™m m·ªõi v√†o items
                const prices =parseFloat(quantityNumber * book.price).toFixed(2); 
                cart.items.push({ bookId, title: book.title, quantity: quantityNumber, price: prices });
            }

            // C·∫≠p nh·∫≠t t·ªïng gi√° ti·ªÅn
            cart.totalPrice = parseFloat(cart.items.reduce((total, item) => total + item.price, 0).toFixed(2));

            await cart.save();
        } else {
            // N·∫øu ch∆∞a c√≥ gi·ªè h√†ng, t·∫°o m·ªõi
            const prices =parseFloat(quantityNumber * book.price).toFixed(2);
            cart = new Cart({
                userId,
                items: [{ bookId ,quantity: quantityNumber, price: prices }],
                totalPrice: prices
            });

            await cart.save();
        }

    } catch (error) {
        console.error("L·ªói khi th√™m s√°ch v√†o gi·ªè h√†ng:", error);
    }
};

const removeBookFromCart = async (userId, bookId) => {
    try {
        const cart = await Cart.findOne({ userId });
        if (!cart) {
            throw new Error("Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i");
        }

        const bookIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);
        if (bookIndex === -1) {
            throw new Error("S√°ch kh√¥ng c√≥ trong gi·ªè h√†ng");
        }

        cart.items.splice(bookIndex, 1);
        cart.totalPrice = parseFloat(cart.items.reduce((total, item) => total + item.quantity * item.price, 0).toFixed(2));

        await cart.save();
    } catch (error) {
        console.error("L·ªói khi x√≥a s√°ch kh·ªèi gi·ªè h√†ng:", error);
    }
}
const clearCart = async (userId) => {
    try {
        const cartClear = await Cart.findOneAndDelete({ userId });

        if (!cartClear) {
            console.log(`Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa userId: ${userId}`);
            return null;
        }

        console.log(`ƒê√£ x√≥a gi·ªè h√†ng c·ªßa userId: ${userId}`);
        return cartClear;
    } catch (error) {
        console.error('L·ªói khi x√≥a d·ªØ li·ªáu:', error.message);
        return null;
    }
};
const increaseQuantity = async (userId, bookId) => {
    try {
        // T√¨m gi·ªè h√†ng theo userId
        const cart = await Cart.findOne({userId});
        if (!cart) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng c·ªßa userId: ${userId}`);
            return null;
        }

        // T√¨m item c√≥ bookId trong gi·ªè h√†ng
        const itemIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);
        if (itemIndex === -1) {
            console.log(`‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m c√≥ bookId: ${bookId}`);
            return null;
        }

        // TƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        cart.items[itemIndex].quantity += 1;
        console.log(`üìå S·ªë l∆∞·ª£ng m·ªõi: ${cart.items[itemIndex].quantity}`);

        // L∆∞u l·∫°i thay ƒë·ªïi
        await cart.save();

        console.log("‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th√†nh c√¥ng");
        return cart;
    } catch (error) {
        console.error("üî• L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
    }
};

module.exports = { getCartByUserId , addBookToCart , removeBookFromCart, clearCart, increaseQuantity};